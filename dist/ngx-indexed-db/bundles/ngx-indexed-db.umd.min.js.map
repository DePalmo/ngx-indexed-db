{"version":3,"sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.ts"],"names":["NgxIndexedDB","dbName","version","this","utils","Utils","dbWrapper","DbWrapper","prototype","openDatabase","upgradeCallback","_this","Promise","resolve","reject","dbVersion","request","indexedDB","open","onsuccess","db","result","onerror","e","errorCode","error","onupgradeneeded","getByKey","storeName","key","validateBeforeTransaction","createTransaction","optionsGenerator","DBMode","readonly","objectStore","get","event","getAll","keyRange","indexDetails","index","indexName","order","openCursor","evt","cursor","push","getAllFast","count","add","value","readwrite","target","update","put","updateBulk","values","forEach","delete","deleteBulk","keys","deleteDatabase","close","deleteDBRequest","onblocked","Error","cursorCallback","openCursorWithIndex","clear","getByIndex","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","validateStoreName","objectStoreNames","contains","options","trans","transaction","dbMode","oncomplete","complete","onabort","abort","type"],"mappings":"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","sourcesContent":["export class NgxIndexedDB {\r\n\tutils: Utils;\r\n\tdbWrapper: DbWrapper;\r\n\r\n\tconstructor(dbName: string, version: number) {\r\n\t\tthis.utils = new Utils();\r\n\t\tthis.dbWrapper = new DbWrapper(dbName, version);\r\n\t}\r\n\r\n\topenDatabase(version: number, upgradeCallback?: Function) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.dbVersion = version;\r\n\t\t\tlet request = this.utils.indexedDB.open(this.dbWrapper.dbName, version);\r\n\t\t\trequest.onsuccess = () => {\r\n\t\t\t\tthis.dbWrapper.db = request.result;\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\r\n\t\t\trequest.onerror = e => {\r\n\t\t\t\treject(\r\n\t\t\t\t\t'IndexedDB error: ' + (<any>e.target).errorCode\r\n\t\t\t\t\t\t? (<any>e.target).errorCode + ' (' + (<any>e.target).error + ')'\r\n\t\t\t\t\t\t: (<any>e.target).errorCode\r\n\t\t\t\t);\r\n\t\t\t};\r\n\r\n\t\t\tif (typeof upgradeCallback === 'function') {\r\n\t\t\t\trequest.onupgradeneeded = e => {\r\n\t\t\t\t\tupgradeCallback(e, this.dbWrapper.db);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tgetByKey(storeName: string, key: any) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\trequest: IDBRequest;\r\n\r\n\t\t\trequest = objectStore.get(key);\r\n\t\t\trequest.onsuccess = function(event: Event) {\r\n\t\t\t\tresolve((<any>event.target).result);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tgetAll(storeName: string, keyRange?: IDBKeyRange, indexDetails?: IndexDetails) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\tresult: Array<any> = [],\r\n\t\t\t\trequest: IDBRequest;\r\n\t\t\tif (indexDetails) {\r\n\t\t\t\tlet index = objectStore.index(indexDetails.indexName),\r\n\t\t\t\t\torder = indexDetails.order === 'desc' ? 'prev' : 'next';\r\n\t\t\t\trequest = index.openCursor(keyRange, <IDBCursorDirection>order);\r\n\t\t\t} else {\r\n\t\t\t\trequest = objectStore.openCursor(keyRange);\r\n\t\t\t}\r\n\r\n\t\t\trequest.onerror = function(e) {\r\n\t\t\t\treject(e);\r\n\t\t\t};\r\n\r\n\t\t\trequest.onsuccess = function(evt: Event) {\r\n\t\t\t\tlet cursor = (<IDBOpenDBRequest>evt.target).result;\r\n\t\t\t\tif (cursor) {\r\n\t\t\t\t\tresult.push(cursor['value']);\r\n\t\t\t\t\tcursor['continue']();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve(result);\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tgetAllFast(storeName: string, keyRange?: IDBKeyRange, count?: number) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\trequest: IDBRequest;\r\n\r\n\t\t\trequest = objectStore.getAll(keyRange, count);\r\n\r\n\t\t\trequest.onerror = (e) => reject(e);\r\n\t\t\trequest.onsuccess = (e) => resolve((<any>e.target).result);\r\n\t\t});\r\n\t}\r\n\r\n\tadd(storeName: string, value: any, key?: any) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\r\n\t\t\tlet request = objectStore.add(value, key);\r\n\t\t\trequest.onsuccess = (evt: any) => {\r\n\t\t\t\tkey = evt.target.result;\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tcount(storeName: string, keyRange?: IDBValidKey | IDBKeyRange) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\trequest: IDBRequest;\r\n\r\n\t\t\trequest = objectStore.count(keyRange);\r\n\r\n\t\t\trequest.onerror = (e) => reject(e);\r\n\t\t\trequest.onsuccess = (e) => resolve((<any>e.target).result);\r\n\t\t});\r\n\t}\r\n\r\n\tupdate(storeName: string, value: any, key?: any) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\r\n\t\t\tobjectStore.put(value, key);\r\n\t\t});\r\n\t}\r\n\r\n\tupdateBulk(storeName: string, values: Array<any>, key?: any) {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\r\n\t\t\tvalues.forEach(value => {\r\n\t\t\t\tobjectStore.put(value, key);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tdelete(storeName: string, key: any) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\r\n\t\t\tobjectStore.delete(key);\r\n\t\t});\r\n\t}\r\n\r\n\tdeleteBulk(storeName: string, keys: Array<any>) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\r\n\t\t\tkeys.forEach(key => {\r\n\t\t\t\tobjectStore.delete(key);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tdeleteDatabase() {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.db.close();\r\n\t\t\tconst deleteDBRequest = this.utils.indexedDB.deleteDatabase(this.dbWrapper.dbName);\r\n\t\t\tdeleteDBRequest.onsuccess = resolve;\r\n\t\t\tdeleteDBRequest.onerror = reject;\r\n\t\t\tdeleteDBRequest.onblocked = () => {\r\n\t\t\t\tthrow new Error('Unable to delete database because it\\'s blocked');\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\topenCursor(storeName: string, cursorCallback: (evt: Event) => void, keyRange?: IDBKeyRange) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\trequest = objectStore.openCursor(keyRange);\r\n\r\n\t\t\trequest.onsuccess = (evt: Event) => {\r\n\t\t\t\tcursorCallback(evt);\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\topenCursorWithIndex(storeName: string, indexName: string, cursorCallback: (evt: Event) => void, keyRange?: IDBKeyRange) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\tindex = objectStore.index(indexName),\r\n\t\t\t\trequest = index.openCursor(keyRange);\r\n\r\n\t\t\trequest.onsuccess = (evt: Event) => {\r\n\t\t\t\tcursorCallback(evt);\r\n\t\t\t\tresolve();\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n\r\n\tclear(storeName: string) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readwrite, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName);\r\n\t\t\tobjectStore.clear();\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tgetByIndex(storeName: string, indexName: string, key: any) {\r\n\t\treturn new Promise<any>((resolve, reject) => {\r\n\t\t\tthis.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\t\t\tlet transaction = this.dbWrapper.createTransaction(\r\n\t\t\t\t\tthis.dbWrapper.optionsGenerator(DBMode.readonly, storeName, reject, resolve)\r\n\t\t\t\t),\r\n\t\t\t\tobjectStore = transaction.objectStore(storeName),\r\n\t\t\t\tindex = objectStore.index(indexName),\r\n\t\t\t\trequest = index.get(key);\r\n\t\t\trequest.onsuccess = event => {\r\n\t\t\t\tresolve((<IDBOpenDBRequest>event.target).result);\r\n\t\t\t};\r\n\t\t});\r\n\t}\r\n}\r\n\r\nexport class Utils {\r\n\tindexedDB: IDBFactory;\r\n\r\n\tconstructor() {\r\n\t\tthis.indexedDB =\r\n\t\t\twindow.indexedDB ||\r\n\t\t\t(<any>window).mozIndexedDB ||\r\n\t\t\t(<any>window).webkitIndexedDB ||\r\n\t\t\t(<any>window).msIndexedDB;\r\n\t}\r\n}\r\n\r\nexport interface IndexDetails {\r\n\tindexName: string;\r\n\torder: string;\r\n}\r\n\r\nexport class DbWrapper {\r\n\tdbName: string;\r\n\tdbVersion: number;\r\n\tdb: IDBDatabase;\r\n\r\n\tconstructor(dbName: string, version: number) {\r\n\t\tthis.dbName = dbName;\r\n\t\tthis.dbVersion = version || 1;\r\n\t}\r\n\r\n\tvalidateStoreName(storeName: string) {\r\n\t\treturn this.db.objectStoreNames.contains(storeName);\r\n\t}\r\n\r\n\tvalidateBeforeTransaction(storeName: string, reject: Function) {\r\n\t\tif (!this.db) {\r\n\t\t\treject('You need to use the openDatabase function to create a database before you query it!');\r\n\t\t}\r\n\t\tif (!this.validateStoreName(storeName)) {\r\n\t\t\treject('objectStore does not exists: ' + storeName);\r\n\t\t}\r\n\t}\r\n\r\n\tcreateTransaction(options: Options): IDBTransaction {\r\n\t\tlet trans: IDBTransaction = this.db.transaction(options.storeName, options.dbMode);\r\n\t\ttrans.onerror = options.error;\r\n\t\ttrans.oncomplete = options.complete;\r\n\t\ttrans.onabort = options.abort;\r\n\t\treturn trans;\r\n\t}\r\n\r\n\toptionsGenerator(type: any, storeName: any, reject: Function, resolve: Function): Options {\r\n\t\treturn {\r\n\t\t\tstoreName: storeName,\r\n\t\t\tdbMode: type,\r\n\t\t\terror: (e: Event) => {\r\n\t\t\t\treject(e);\r\n\t\t\t},\r\n\t\t\tcomplete: (e: Event) => {\r\n\t\t\t\tresolve();\r\n\t\t\t},\r\n\t\t\tabort: (e: Event) => {\r\n\t\t\t\treject(e);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport interface Options {\r\n\tstoreName: string;\r\n\tdbMode: IDBTransactionMode;\r\n\terror: (e: Event) => any;\r\n\tcomplete: (e: Event) => any;\r\n\tabort?: any;\r\n}\r\n\r\nexport enum DBMode {\r\n\treadonly = 'readonly',\r\n\treadwrite = 'readwrite'\r\n}\r\n"]}